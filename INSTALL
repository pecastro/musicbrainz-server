Installing the MusicBrainz Server
=================================

The MusicBrainz Server (musicbrainz-server) is the web frontend to the
MusicBrainz Database, and is accessible at http://musicbrainz.org.

This document explains the steps necessary to setup your own MusicBrainz Server.
If you require any assistance with these instructions, please feel free to
contact us via the information given at the bottom of this document.

Prerequisites
-------------

1)  A Unix based operating system

    The MusicBrainz development team uses a mix of Ubuntu and Debian, but
    Mac OS X will work just fine. If you are running Windows we recommend you
    set up a Debian or Ubuntu virtual machine.

    This document will assume you are using Ubuntu for its instructions.

2)  Perl (at least version 5.8.0)

    Perl 5.10.0 is acceptable, but be aware that it has some quirks in handling
    subroutine attributes which can make debugging difficult in a few cases.
    However, these issues were fixed in Perl 5.10.1.

    Perl comes bundled with most Linux operating systems, you can check your
    installed version of Perl with:

        perl -v

3)  PostgreSQL (at least version 8.3)

    PostgreSQL is required, along with its development libraries. To install
    using packages run the following, replacing 8.x with the latest version.

        sudo apt-get install postgresql-8.x postgresql-server-dev-8.x postgresql-contrib

    Alternatively, you may compile PostgreSQL from source, but then make sure
    to also compile the cube extension found in contrib/cube. The database
    import script will take care of installing that extension into the database
    when it creates the database for you.

4)  Git

    The MusicBrainz development team uses Git for their DVCS. To install Git,
    run the following:

        sudo apt-get install git-core


5)  Memcached

    By default the MusicBrainz server requires a Memcached server running on
    the same server with default settings.  You can change the memcached server
    name and port or configure other datastores in lib/DBDefs.pm.


Server configuration
--------------------

1)  Download the source code.

        git clone git://git.musicbrainz.org/musicbrainz-server.git
        cd musicbrainz-server

2)  Modify the server configuration file.

        cp lib/DBDefs.pm.default lib/DBDefs.pm

    Fill in the appropriate values for MB_SERVER_ROOT and WEB_SERVER.

    Determine what type of server this will be using REPLICATION_TYPE:
    a) RT_SLAVE (mirror server)
       A mirror server will always be in sync with the master database at
       http://musicbrainz.org by way of an hourly replication packet. Mirror servers
       do not allow any local editing, after the initial data import the only changes
       allowed will be to load the next replication packet in turn.

       Mirror servers will have their WikiDocs automatically kept up to date.

       If you are not setting up a mirror server for development purposes, make sure
       to set DB_STAGING_SERVER to 0.

    b) RT_STANDALONE
       A stand alone server is recommended if you are setting up a server for development
       purposes. They do not accept the replication packets and will require manually
       importing a new database dump in order to bring it up to date with the master database.
       Local editing is available, but keep in mind that none of your changes will be pushed
       up to http://musicbrainz.org.

       Stand alone servers will need to manually download and update their WikiDoc
       transclusion table:

            wget -O root/static/wikidocs/index.txt http://musicbrainz.org/static/wikidocs/index.txt


Installing Perl dependencies
----------------------------

1)  Build Makefile

    Some sections are marked optional, but you are encouraged to accept the
    defaults and install everything. Optional sections are generally there for
    the convenience of the master server which uses a slightly different stack.

        perl ./Makefile.PL

2)  Install dependencies

    This above will have generated a standard Makefile which you can use to
    automatically install dependencies by running:

        sudo make installdeps

    NOTE: You will have to manually install some of the dependencies by running:

        # OSSP::UUID
        sudo apt-get install libossp-uuid-perl

        # Test::WWW::Mechanize
        sudo apt-get install libtest-www-mechanize-perl

    If you have trouble installing any of the dependencies you may have to
    force their installation by running:

        sudo cpan -f Module::Name


Creating the database
---------------------

1)  Install PostgreSQL Extensions

    Before you start, you need to install the PostgreSQL Extensions on your database
    server. To build the musicbrainz_unaccent extension run these commands:

        cd postgresql-musicbrainz-unaccent
        make
        sudo make install
        cd ..

    To build our collate extension you will need libicu and it's development files,
    to install these run:

        sudo apt-get install libicu-dev

    With libicu installed, you can build and install the collate extension by running:

        cd postgresql-musicbrainz-collate
        make
        sudo make install
        cd ..


2)  Setup PostgreSQL authentication

    For normal operation, the server only needs to connect from one or two OS
    users (whoever your web server / crontabs run as), to one database (the
    MusicBrainz Database), as one PostgreSQL user. The PostgreSQL database name
    and user name are given in DBDefs.pm (look for the "READWRITE" key).
    For example, if you run your web server and crontabs
    as "www-user", the following configuration recipe may prove useful:

        # in pg_hba.conf (Note: The order of lines is important!):
        local    musicbrainz_db    musicbrainz    ident    mb_map

        # in pg_ident.conf:
        mb_map    www-user    musicbrainz

    Alternatively, if you are running a server for development purposes and
    don't require any special access permissions, the following configuration
    in pg_hba.conf will suffice (make sure to insert this line before any other
    permissions):

        local   all    all    trust


3)  Create the databases

    You have two options when it comes to databases. You can either opt for a
    clean database with just the schema (useful for developers with limited
    disk space), or you can import a full database dump.

    a)  Use a clean database

        To use a clean database, all you need to do is run:

            ./admin/InitDb.pl --createdb --clean

    b)  Import an NGS database dump

        The easiest way to import the database is to use a database
        dump.  These are periodic dumps of the database, they're
        available here:

            ftp://ftp.musicbrainz.org/pub/musicbrainz/data/fullexport/

        To get going, you need at least the mbdump.tar.bz2, mbdump-editor.tar.bz2
        and mbdump-derived.tar.bz2 archives, but you can grab whichever dumps suit
        your needs. Assuming the dumps have been downloaded to /tmp/dumps/ you
        can import them with:

            ./admin/InitDb.pl --createdb --import /tmp/dumps/mbdump*.tar.bz2 --echo

        --echo just gives us a bit more feedback in case this goes wrong, you
        may leave it off. Remember to change the paths to your mbdump*.tar.bz2
        files, if they are not in /tmp/dumps/.

    c)  Importing a non-NGS database dump

        NOTE: This method requires the time consuming process of manually
        converting the database from the existing schema to the NGS format, and
        is not recommended.

        Follow these instructions for a "Database only" install:

            http://bugs.musicbrainz.org/browser/mb_server/branches/RELEASE_20090524-BRANCH/INSTALL

        To ensure that the data imports cleanly, make sure to use a data dump
        from 2009-06-19 or later!

        Once the data has been imported, return to the NGS codebase and run:

            ./upgrade.sh

        This will convert the data to the NGS format and will take some time.
        Please be patient!


    NOTE: on a fresh postgresql install you may see the following error:

        CreateFunctions.sql:33: ERROR:  language "plpgsql" does not exist

    To resolve that login to postgresql with the "postgres" user (or
    any other postgresql user with SUPERUSER privileges) and load the
    "plpgsql" language into the database with the following command:

        postgres=# CREATE LANGUAGE plpgsql;


Starting the server
------------------

1)  Start the development server

    You should now have everything ready to run the development server!

    The development server is a lightweight HTTP server that gives good debug
    output and is much more convenient than having to set up a standalone
    server. Just run:

        ./script/musicbrainz_server.pl -r

    Visiting http://your.machines.ip.address:3000 should now present you with
    your own running instance of the MusicBrainz Server.

2)  Troubleshooting

    If you have any difficulties, please feel free to contact aCiD2 or warp in
    #musicbrainz-devel on irc.freenode.net, or email the developer mailing list
    at musicbrainz-devel [at] lists.musicbrainz.org.

    If you find any bugs, please report them on http://jira.musicbrainz.org.

    Good luck, and happy hacking!
