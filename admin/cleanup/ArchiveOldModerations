#!/usr/bin/perl -w
# vi: set ts=4 sw=4 :
#____________________________________________________________________________
#
#   MusicBrainz -- The community music metadata project.
#
#   Copyright (C) 2005 Robert Kaye
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#   $Id$
#____________________________________________________________________________

use strict;

use FindBin;
use lib "$FindBin::Bin/../../lib";

=pod

=head1 NAME

ArchiveOldModerations - save old mods to file, delete them from the database

=head1 SYNOPSIS

./admin/cleanup/ArchiveOldModerations

=head1 DESCRIPTION

Each run of F<ArchiveOldModerations> produces an output file named F<oldmods-YYYYMMDD-HHMMSS-UTC-N.dat>
in the current directory
(where C<YYYYMMDD-HHMMSS> represents the timestamp of the moment the script started).

Moderations are selected as follows:

  type = MOD_ADD_TRMS and opentime >= 60 days ago

The format of the output file is reasonably straightforward: the first line
begins with "--", and states the DB schema sequence number.  Thereafter there
are zero or more transaction blocks.

Each transaction block consists of the line "BEGIN;", followed by some data
lines, followed by the line "COMMIT;".  Each data line is in Postgres "copy"
format, but is preceded by the name of the table it came from and a tab
character.

At the time of writing, no script is provided for doing anything with these data
files.

=cut

use Getopt::Long qw( GetOptions );
my $chunk = 1000;
my $commit = 0;
my $full = 0;
my ($la_lwm, $la_hwm) = (1, 2);
my $sleep;
my $start_id;
GetOptions(
    "chunk=i"   => \$chunk,
    "commit=i"  => \$commit,
    "full"              => \$full,
    "la-hwm=f"  => \$la_hwm,
    "la-lwm=f"  => \$la_lwm,
    "sleep=i"   => \$sleep,
    "start-id=i"=> \$start_id,
) or exit 2;

use DBDefs;
use MusicBrainz;
use ModDefs;
use Moderation;

print localtime() . " : ArchiveOldModerations starting\n";
eval 'END { print localtime() . " : ArchiveOldModerations complete\n"; }';
$SIG{INT} = sub { die "Interrupt\n" } if -t;

my $mb = MusicBrainz->new;
$mb->Login;
my $sql = Sql->new($mb->{dbh});

my $threshold_time = time() - 86400 * 60; # 60 days
my $threshold_mod_id = Moderation->iFindByTime($mb->{dbh}, $threshold_time);
my ($iMin, $iMax) = Moderation->iiMinMaxID($mb->{dbh});
$iMin = $start_id if $start_id;
print localtime() . " : min=$iMin threshold=$threshold_mod_id max=$iMax\n";

my $types = join ",", &ModDefs::MOD_ADD_TRMS, &ModDefs::MOD_ADD_PUIDS;

nibble(
    "SELECT id FROM moderation_closed WHERE type IN ($types) AND id BETWEEN ? AND ?",
    $iMin, $threshold_mod_id,
    [ "moderation_note_closed", "moderation" ],
    [ "vote_closed", "moderation" ],
    [ "moderation_closed", "id" ],
);

sub nibble
{
    my ($getidquery, $iMin, $iMax, @deletelist) = @_;

    require POSIX;
    my $now = POSIX::strftime('%Y%m%d-%H%M%S-UTC', gmtime);

    my $filename;
    my $fh;
    for (my $n=1; ; ++$n)
    {
        $filename = "oldmods-$now-$n.dat";
        use Fcntl qw( O_CREAT O_RDWR O_EXCL );
        sysopen($fh, $filename, O_CREAT|O_RDWR|O_EXCL) and last;
        next if $!{EEXIST};
        die "open >$filename: $!";
    }
    print localtime() . " : Saving to $filename\n";

    print $fh "-- schema sequence " . &DBDefs::DB_SCHEMA_SEQUENCE . "\n"
        or die $!;

    my $done = 0;
    while (not $done)
    {
        check_loadavg();

        my $pos = tell $fh;
        require IO::Handle;

        $sql->AutoCommit;
        $sql->Do("SET SESSION CHARACTERISTICS AS TRANSACTION ISOLATION LEVEL SERIALIZABLE");

        eval {
                $sql->Begin;

                my $iLocalMax = $iMin + $chunk - 1;

                # Make the list of IDs that we're going to process
                print localtime() . " : Getting ID set ($iMin - $iLocalMax)\n";
                $sql->Do("CREATE TEMPORARY TABLE tmp_ids AS $getidquery LIMIT $chunk", $iMin, $iLocalMax);
                my $count = $sql->SelectSingleValue("SELECT COUNT(*) FROM tmp_ids");
                print localtime() . " : Got $count IDs\n";

                if ($count == 0)
                {
                        $sql->Do("DROP TABLE tmp_ids");
                        $sql->Commit;
                        $iMin = $iLocalMax + 1;
                        $done = 1 if $iMin > $iMax;
                        return;
                }

                $fh->autoflush(0);
                print $fh "BEGIN;\n" or die $!;

                for my $q (@deletelist)
                {
                        my ($tab, $col) = @$q;
                        print localtime() . " : $tab.$col\n";

                        $sql->Do("CREATE TEMPORARY TABLE tmp_copy AS"
                                . " SELECT * FROM $tab WHERE $col IN (SELECT id FROM tmp_ids)");

                        copy_table_to_fh($sql, "tmp_copy", $fh, "$tab\t");

                        $sql->Do("DROP TABLE tmp_copy");
                        $sql->Do("DELETE FROM $tab WHERE $col IN (SELECT id FROM tmp_ids)");
                }
                $fh->autoflush(1);
                $sql->Do("DROP TABLE tmp_ids");
                print $fh "COMMIT;\n" or die $!;
                $sql->Commit;
        };
        if ($@) {
                my $err = $@;
                eval { $sql->Rollback };
                print "Rolling back $filename to $pos\n";
                seek($fh, $pos, 0) or die $!;
                truncate($fh, $pos) or die $!;
                die $err;
        }
        print localtime() . " : Committed $filename to ".tell($fh)."\n";
        sleep $sleep if defined $sleep;
    }

    print localtime() . " : Nibble complete\n";
}

exit 0;

sub check_loadavg
{
    my $la = loadavg();
    return if $la < $la_hwm;
    local $| = 1;
    print localtime() . " : Waiting for load average ($la) to fall ...";
    while (1)
    {
        sleep 10;
        $la = loadavg();
        print " $la";
        last if $la < $la_lwm;
    }
    print "\n";
    print localtime() . " : Continuing\n";
}

sub loadavg
{
    open(my $fh, "<", "/proc/loadavg") or return undef;
    my $line = <$fh>;
    close $fh;
    return (split ' ', $line)[0];
}

sub copy_table_to_fh
{
    my ($sql, $table, $fh, $prefix) = @_;

    $sql->Do("COPY \"$table\" TO stdout");
    my $buffer;
    my $rows = 0;

    # This has to be at least as large as the longest line given
    # by "copy table to stdout".
    # Currently the largest value is moderation #2575726 at approx
    # 312,851 bytes.
    my $max = 315_000; my $maxline = __LINE__;
    my $longest = 0;

    my $dbh = $sql->{dbh};
    while ($dbh->func($buffer, $max, "getline"))
    {
        die "\nProbable data truncation!  See $0 line $maxline"
                if length($buffer) >= $max-1;

        $longest = length($buffer) if length($buffer) > $longest;
        print $fh "$prefix$buffer\n"
                or die $!;

        ++$rows;
    }

    $dbh->func("endcopy") or die;
}

# eof ArchiveOldModerations
