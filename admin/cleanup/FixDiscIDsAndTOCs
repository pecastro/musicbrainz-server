#!/usr/bin/perl -w
# vi: set ts=4 sw=4 :
#____________________________________________________________________________
#
#   MusicBrainz -- The community music metadata project.
#
#   Copyright (C) 1998 Robert Kaye
#   Copyright (C) 2001 Luke Harless
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#   $Id$
#____________________________________________________________________________

use strict;

use FindBin;
use lib "$FindBin::Bin/../../lib";

use DBDefs;
use MusicBrainz;

=pod

Things to check in the cdtoc table:

 * that trackcount matches the length of the trackoffset array
 * that discid and freedbid match the TOC implied by (trackcount, leadoutoffset, trackoffset)

Finally, no two rows should be identical (ignoring "id").
 
There's nothing really to check on the album_cdtoc table.  The database
already forces album/cdtoc to be unique, which is the main thing.

=cut

sub showhelp { print <<EOF; }
Usage: FixDiscIDsAndTOCs [OPTIONS]

Allowed options are:
        --[no]dry-run     don't actually make any changes (best used with
                          --verbose) (default is to make the changes)
        --[no]verbose     show the changes as they are made
        --[no]summary     show a summary when done
        --[no]debug       show lots of debugging information
        --help            show this help

EOF

use Getopt::Long;
my $debug = 0;
my $dry_run = 0;
my $verbose = 0;
my $summary = 0;
my $progress = 0;
GetOptions(
    "debug!"                    => \$debug,
    "dry-run|dryrun|n"  => \$dry_run,
    "verbose|v"                 => \$verbose,
    "summary|s"                 => \$summary,
    "progress|p"                => \$progress,
    "help|h"                    => sub { showhelp(); exit 0; },
) or exit 2;
showhelp(), exit 2 if @ARGV;

print localtime() . " : FixDiscIDsAndTOCs starting\n";
eval 'END { print localtime() . " : FixDiscIDsAndTOCs complete\n"; }';

my $mb = MusicBrainz->new;
$mb->Login;
my $sql = Sql->new($mb->{dbh});
$| = 1 if $progress;

# Look for rows where discid and/or freedbid do not match the implied TOC,
# or where trackcount does not match the number of track offsets.
# There is no way to do all this except to retrieve the whole table and
# manually calculate the correct values for each row.
print localtime() . " : Scanning cdtoc\n";

my $perfect = 0;
my @fix_discid;
my @delete_unparseable;

print "?/?\r" if $progress;
$sql->Select("SELECT * FROM cdtoc");
my $rows = $sql->Rows;
my $i = 0;

require MusicBrainz::Server::CDTOC;
my $cdtocfactory = MusicBrainz::Server::CDTOC->new($mb->{dbh});

while (my $row = $sql->NextRowHashRef)
{
    print "$i/$rows\r" if $progress and not $i % 31;
    ++$i;

    my $cdtoc = $cdtocfactory->_new_from_row($row);
    my $id = $cdtoc->GetId;

    if (@{ $cdtoc->GetTrackOffsets } != $cdtoc->GetTrackCount)
    {
        push @delete_unparseable, $row;
        warn "cdtoc #$id has track count mismatch\n";
        next;
    }

    my %info = MusicBrainz::Server::CDTOC->ParseTOC($cdtoc->GetTOC);

    if (not %info)
    {
        push @delete_unparseable, $row;
        warn "cdtoc #$id does not parse\n";
        next;
    }

    my $correct_discid = $info{discid};
    my $correct_freedbid = $info{freedbid};

    ++$perfect, next
        if $row->{discid} eq $correct_discid
        and $row->{freedbid} eq $correct_freedbid;

    push @fix_discid, [ $id, $correct_discid, $correct_freedbid ];
    warn "Will fix cdtoc #$id\n";
}

$sql->Finish;
print "$i/$rows\n" if $progress;

printf <<EOF,
%s : Summary follows:
        Perfect: %d
        Unparseable: %d
        Fix discid / freedbid: %d
EOF
    scalar localtime,
    $perfect,
    0+@delete_unparseable,
    0+@fix_discid,
    if $summary;

unless (@delete_unparseable
    or @fix_discid
) {
    print localtime() . " : Nothing to fix - exiting\n";
    exit 0;
}

if ($dry_run)
{
    print localtime() . " : Dry run requested - not fixing data\n";
    exit 1;
}

# Fix it!

$sql->Begin;
$sql->Do("LOCK TABLE cdtoc IN EXCLUSIVE MODE");

if (@delete_unparseable)
{
    printf "%s : Deleting %d unparseable CDTOC row%s\n",
        scalar localtime,
        0+@delete_unparseable,
        (@delete_unparseable==1 ? "" : "s"),
        ;

    for my $row (@delete_unparseable)
    {
        print localtime() . " : Deleting cdtoc #$row->{id} with unparseable TOC\n"
                if $verbose;
        $sql->Do("DELETE FROM album_cdtoc WHERE cdtoc = ?", $row->{id});
        $sql->Do("DELETE FROM cdtoc WHERE id = ?", $row->{id});
    }
}

if (@fix_discid)
{
    printf "%s : Fixing %d incorrect discid / freedbid row%s\n",
        scalar localtime,
        0+@fix_discid,
        (@fix_discid==1 ? "" : "s"),
        ;
    
    for my $fix (@fix_discid)
    {
        my ($id, $correct_discid, $correct_freedbid) = @$fix;

        print localtime() . " : Fixing cdtoc #$id with wrong discid / freedbid\n"
                if $verbose;
        $sql->Do(
                "UPDATE cdtoc SET discid = ?, freedbid = ? WHERE id = ?",
                $correct_discid,
                $correct_freedbid,
                $id,
        );
    }
}

$sql->Commit;

exit 0;

# eof FixDiscIDsAndTOCs
