#!/usr/bin/perl -w
# vi: set ts=4 sw=4 :
#____________________________________________________________________________
#
#   MusicBrainz -- The community music metadata project.
#
#   Copyright (C) 1998 Robert Kaye
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#    This script written November 2003 by Matthias Friedrich
#
#   $Id$
#____________________________________________________________________________

use 5.008;
use strict;

use FindBin;
use lib "$FindBin::Bin/../../lib";

use Getopt::Long;

use DBDefs;
use MusicBrainz;
use Sql;
use ModDefs;
use UserStuff;
use Moderation;
use MusicBrainz::Server::Track;

my $mb = MusicBrainz->new;
$mb->Login;
my $sql = Sql->new($mb->{dbh});

my $mbWrite = MusicBrainz->new;
$mbWrite->Login;
my $sqlWrite = Sql->new($mbWrite->{dbh});

#
# Default options.
#
my $opt_use_automod = 1;
my $opt_moderator = &ModDefs::MODBOT_MODERATOR;
my $opt_display_help = 0;
my $dry_run = 0;
my $opt_verbose = -t STDIN;
my $opt_summary = 1;
my $privs;

#
# Parse command line options.
#
GetOptions(
    "automod!"                  => \$opt_use_automod,
    "moderator=s"               => sub {
        my $user = $_[1];
        my $u = UserStuff->new($mb->{dbh});
        (undef, my $uid) = $u->GetUserPasswordAndId($user);
        die "No such moderator '$user'\n" unless $uid;
        $opt_moderator = $uid;
    },
    "dry-run|dryrun!"   => \$dry_run,
    "verbose!"                  => \$opt_verbose,
    "summary!"                  => \$opt_summary,
    "help"                              => \$opt_display_help,
) or $opt_display_help = 1;

$privs = &UserStuff::BOT_FLAG;
$privs |= &UserStuff::AUTOMOD_FLAG if $opt_use_automod;

#
# Display usage information and exit.
#
die <<EOF if $opt_display_help;
Usage: FixFeaturingArtists [OPTIONS]

Allowed options are:
        --[no]automod     [don't] automod the inserted moderations
                          (default is to automod)
        --moderator=NAME  insert the moderations as moderator NAME
                          (default is the 'ModBot')
        --[no]fix         [don't] fix the tracks
                          (default is not to fix)
        --help            show this help

EOF

die "Useless invocation of FixFeaturingArtists\n"
    if not $opt_summary and not $opt_verbose and $dry_run;

#
# Go through the tracks table and get tracks that most probably contain
# featuring artists. We don't touch tracks with pending moderations.
#
# Note: The ~* and !~* regexp operators are postgres extensions.
#
print localtime() . " : Finding tracks ...\n"
    if $opt_verbose or $opt_summary;

$sql->Select(<<EOF, &ModDefs::STATUS_OPEN, &ModDefs::MOD_EDIT_TRACKNAME) or die;
    SELECT id, name, artist FROM track t
    WHERE NOT EXISTS (
        SELECT id FROM moderation_open m
        WHERE m.rowid = t.id AND m.status = ? AND m.type = ?
    )
      AND ( t.name ~* '[[(]feat[^.]' OR t.name ~* '[[(]ft' )
EOF

#
# Now go through the set of tracks we got.
#
my $num = 0;
my $changed = 0;

while ( my ($trackid, $oldname, $artistid) = $sql->NextRow )
{
    # Try to rewrite the track name.
    #
    my $newname = rewrite_name($oldname);


    # Enter a moderation if the track name changed.
    #
    if ( $newname ne $oldname )
    {
        if ( not $dry_run )
        {
                enter_moderation($sqlWrite, $opt_moderator, $privs,
                        $trackid, $artistid, $oldname, $newname);
        }
        else
        {
                # Do nothing, just log what would have been done.
                #
                printf "%s : %6d: '%s' -> '%s'\n",
                        scalar(localtime),
                        $trackid, $oldname, $newname
                        if $opt_verbose;
        }

        $changed++;
    }
    
    $num++;
}

print localtime() . " : Done\n"
    if $opt_verbose;

$sql->Finish;
$sqlWrite->Finish;

print localtime() . " : $num suspicious tracks, changed $changed.\n"
    if $opt_summary;

exit;

#
# Rewrite the following cases:
#     "track name (featuring artist)",
#    "track name [ft artist]" and the like
#
# Input is the name to rewrite. Output is the rewritten name. If no
# rewriting took place, input equals output.
#
sub rewrite_name
{
    my $name = shift;

    $name =~ s/^
                (.*?)                           # track name
                \s+                                     # space
                [[(]\s*
                (?:featuring|feat|ft)\.?\s+
                (.*?)                           # artist name
                [])]
                (.*)$                           # mix info etc.
        /
                "$1 (feat. $2)$3"
        /xoie;

    return $name;
}

#
# Enter an edit track moderation.
#
sub enter_moderation
{
    my ($sql, $modid, $privs, $trackid, $artistid, $oldname, $newname) = @_;

    # Create a Track object. Just as much as necessary to enter the mod.
    #
    my $track = MusicBrainz::Server::Track->new($sql->{dbh});
    $track->SetId($trackid);
    $track->SetArtist($artistid);
    $track->SetName($oldname);

    $sql->Begin;

    eval
    {
        my @mods = Moderation->InsertModeration(
                        DBH     => $sql->{dbh},
                        uid     => $modid,
                        privs   => $privs,
                        type    => &ModDefs::MOD_EDIT_TRACKNAME,
                        # --
                        track   => $track,
                        newname => $newname
        );

        $sql->Commit;

        printf "%s : Inserted mod %6d for track %6d\n",
                scalar(localtime),
                $mods[0]->GetId, $trackid
                if $opt_verbose;

        1;
    }
    or do
    {
        eval { $sql->Rollback };

        print localtime() . " : Error entering moderation for track $trackid\n";
    }
}

# eof FixFeaturingArtists
