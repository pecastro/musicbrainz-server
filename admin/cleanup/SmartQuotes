#!/usr/bin/perl -w
# vi: set ts=4 sw=4 :
#____________________________________________________________________________
#
#   MusicBrainz -- the open internet music database
#
#   Copyright (C) 1998 Robert Kaye
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#   $Id$
#____________________________________________________________________________

use 5.008;
use strict;

use FindBin;
use lib "$FindBin::Bin/../../lib";

use Encode qw( encode decode FB_CROAK );
use Getopt::Long;

use DBDefs;
use MusicBrainz;
use Sql;
use ModDefs;
use UserStuff;

my $mb = MusicBrainz->new;
$mb->Login;
my $sql = Sql->new($mb->{dbh});

my $mb2 = MusicBrainz->new;
$mb2->Login;
my $sqlWrite = Sql->new($mb2->{dbh});

my $use_auto_mod = 1;
my $moderator = &ModDefs::MODBOT_MODERATOR;
my %do = (
    artist => 1,
    artistalias => 1,
    album => 1,
    track => 1,
);
my $help = 0;
my $fixfile = undef;
my $debug = 0;

GetOptions(
    "automod!"          => \$use_auto_mod,
    "moderator=s"       => sub {
        my $user = $_[1];
        my $u = UserStuff->new($mb->{dbh});
        (undef, my $uid) = $u->GetUserPasswordAndId($user);
        $uid or die "No such moderator '$user'";
        $moderator = $uid;
    },
    "artist!"           => \$do{'artist'},
    "artistalias!"      => \$do{'artistalias'},
    "album!"            => \$do{'album'},
    "track!"            => \$do{'track'},
    "fixfile=s"         => \$fixfile,
    "debug!"            => \$debug,
    "help"                      => \$help,
) or $help = 1;

$help = 1 if @ARGV;

die <<EOF if $help;
Usage: SmartQuotes [OPTIONS]

Allowed options are:
        --[no]automod     [don't] automod the inserted moderations
                          (default is to automod)
        --moderator=NAME  insert the moderations as moderator NAME
                          (default is the 'ModBot')
        --[no]artist      [don't] process the artist table
        --[no]artistalias [don't] process the artistalias table
        --[no]album       [don't] process the album table
        --[no]track       [don't] process the track table
        --fixfile=FILE    fix the words named in FILE
        --help            show this help

Run SmartQuotes once without a 'fixfile' argument to produce a list of words
to fix.  Save and edit that list, then run SmartQuotes again, specifying
the saved list using --fixfile=FILE.

EOF

my $smartquote = chr(180);
my $smartquote_enc = encode "utf-8", $smartquote;
my $backtick = '`';

my %tofix;

if (defined $fixfile)
{
    @ARGV = ($fixfile);

    while (<>)
    {
        while (/\b(\w+(?:(?:$smartquote|$backtick)\w+)+)\b/g)
        {
                $tofix{$1} = 0;
        }
    }

    printf "Fixing %d distinct words\n", scalar keys %tofix;
}

my %words;
my %types;

my $privs = UserStuff::BOT_FLAG;
$privs |= UserStuff::AUTOMOD_FLAG if $use_auto_mod;

for (
    [ &ModDefs::MOD_EDIT_ARTISTNAME, "artist.name.id" ],
    [ &ModDefs::MOD_EDIT_ARTISTSORTNAME, "artist.sortname.id" ],
    [ &ModDefs::MOD_EDIT_ARTISTALIAS, "artistalias.name.ref" ],
    [ &ModDefs::MOD_EDIT_RELEASE_NAME, "album.name.artist" ],
    [ &ModDefs::MOD_EDIT_TRACKNAME, "track.name.artist" ],
) {
    my $modtype = $_->[0];
    my ($table, $column, $artistcol) = split /\./, $_->[1];

    $do{$table} or next;

    print "Reading $table table\n" if $debug;
    $sql->Select(
        "SELECT id, $column, $artistcol FROM $table WHERE $column ~ ? OR $column ~ ?",
        $smartquote_enc,
        $backtick,
    );

    local $SIG{INT} = sub { die "SIGINT\n" };

    while (my ($id, $name, $artistid) = $sql->NextRow)
    {
        $name = decode "utf-8", $name, FB_CROAK;
        my $oname = $name;
        
        while ($name =~ /\b(\w+(?:(?:$smartquote|$backtick)\w+)+)\b/g)
        {
                my $word = $1;
                ++$words{lc $word};

                if (exists $tofix{lc $word})
                {
                        print "Fix $word\n" if $debug;
                        (my $newword = $word) =~ s/(?:$smartquote|$backtick)/'/g;
                        $name =~ s/\b$word\b/$newword/g;
                } else {
                        print "Don't fix $word\n" if defined $fixfile and $debug;
                }
        }

        if ($oname ne $name)
        {
                $sqlWrite->Begin;

                my @mods;
                        
                eval {
                        my $thingtype;
                        my $thing;
                        
                        if ($table eq "artist")
                        {
                                # TODO If the new name already exists, we'll get merge
                                # instead; however, the merge won't be auto-modded.
                                # Hence, we need to check for name clashes, then check for
                                # open "merge" mods, and not add the mod if it's already
                                # there.
                                require MusicBrainz::Server::Artist;
                                my $ar = MusicBrainz::Server::Artist->new($sqlWrite->{dbh});
                                $ar->SetId($id);
                                $ar->SetName(encode "utf-8", $oname);
                                $ar->SetSortName(encode "utf-8", $oname);
                                ($thingtype, $thing) = (artist => $ar);
                        }
                        elsif ($table eq "artistalias")
                        {
                                require MusicBrainz::Server::Alias;
                                my $al = MusicBrainz::Server::Alias->new($sqlWrite->{dbh}, 'artistalias');
                                $al->SetId($id);
                                $al->SetRowId($artistid);
                                $al->SetName(encode "utf-8", $oname);
                                ($thingtype, $thing) = (alias => $al);
                        }
                        elsif ($table eq "album")
                        {
                                require MusicBrainz::Server::Release;
                                my $al = MusicBrainz::Server::Release->new($sqlWrite->{dbh});
                                $al->SetId($id);
                                $al->SetArtist($artistid);
                                $al->SetName(encode "utf-8", $oname);
                                ($thingtype, $thing) = (album => $al);
                        }
                        elsif ($table eq "track")
                        {
                                require MusicBrainz::Server::Track;
                                my $tr = MusicBrainz::Server::Track->new($sqlWrite->{dbh});
                                $tr->SetId($id);
                                $tr->SetArtist($artistid);
                                $tr->SetName(encode "utf-8", $oname);
                                ($thingtype, $thing) = (track => $tr);
                        }

                        $thing or die;

                        use Moderation;
                        push @mods, Moderation->InsertModeration(
                                DBH     => $sqlWrite->{dbh},
                                uid     => $moderator,
                                privs => $privs,
                                type => $modtype,
                                # --
                                $thingtype => $thing,
                                newname => encode("utf-8", $name),
                        );

                        if (@mods == 1 and $mods[0]->Type == &ModDefs::MOD_MERGE_ARTIST)
                        {
                                # Check to see if there's already an open mod that's the
                                # same as this one.

                                # TODO check...

                                if (1)
                                {
                                        warn "Rolling back Merge Artist mod for $oname => $name\n";
                                        eval { $sqlWrite->Rollback };
                                        next; # "Exiting eval via next"
                                }
                        }
                };

                if ($@)
                {
                        my $err = $@;
                        $err = eval { $err->GetError } || $err
                                if ref $err;
                        eval { $sqlWrite->Rollback };
                        print STDERR "Error inserting moderation for $table #$id: $err\n";
                        next;
                }

                $sqlWrite->Commit;

                ++$types{$_->Type}
                        for @mods;

                printf "Inserted mod %s ($oname => $name)\n",
                        join(",", map { $_->GetId } @mods);
        }
    }

    $sql->Finish;
}

if (%types)
{
    print "Entered the following moderations:\n";
    for my $type (sort { $a <=> $b } keys %types)
    {
        my $name = Moderation->ClassFromType($type)->Name;
        printf "  Type %2d (%s) : %d\n", $type, $name, $types{$type};
    }
}

if (not defined $fixfile)
{
    printf "%12d  %s\n", $words{$_}, $_
        for sort { $words{$a} <=> $words{$b} } keys %words;
}

# eof SmartQuotes
