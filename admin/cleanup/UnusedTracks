#!/usr/bin/perl -w
# vi: set ts=4 sw=4 :
#____________________________________________________________________________
#
#   MusicBrainz -- The community music metadata project.
#
#   Copyright (C) 1998 Robert Kaye
#   Copyright (C) 2001 Luke Harless
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#   $Id$
#____________________________________________________________________________

use 5.008;
use strict;

use FindBin;
use lib "$FindBin::Bin/../../lib";

use Getopt::Long;

use DBDefs;
use MusicBrainz;
use Sql;
use ModDefs;
use UserStuff;

my $mb = MusicBrainz->new;
$mb->Login;
my $sql = Sql->new($mb->{dbh});

my $mb2 = MusicBrainz->new;
$mb2->Login;
my $sqlWrite = Sql->new($mb2->{dbh});

my $remove = 1;
my $verbose;
my $summary = 1;

GetOptions(
    "remove!"           => \$remove,
    "verbose!"          => \$verbose,
    "summary!"          => \$summary,
    "help|h|?"          => sub { usage(); exit },
) or exit 2;

usage(), exit 2 if @ARGV;

sub usage
{
    print <<EOF;
Usage: UnusedTracks [OPTIONS]

Allowed options are:
        --[no]remove      [don't] remove unused tracks
                          (default is --remove)
        --[no]verbose     [don't] show information about each track
        --[no]summary     [don't] show summary information at the end
                          (default is --summary)
    -h, --help            show this help (also "-?")

EOF
}

$verbose = ($remove ? 0 : 1)
    unless defined $verbose;

print(STDERR "Running with --noremove --noverbose --nosummary is pointless\n"), exit 1
    unless $remove or $verbose or $summary;

print localtime() . " : Finding unused tracks\n";

$sql->Select(<<EOF);

    SELECT      t.id
    FROM        track t
        LEFT JOIN albumjoin j
                ON j.track = t.id
    WHERE       j.track IS NULL

EOF

my $count = 0;
my $removed = 0;

while (my ($id) = $sql->NextRow)
{
    next if $id == &ModDefs::VARTIST_ID;
    next if $id == &ModDefs::DARTIST_ID;

    ++$count;

    if (not $remove)
    {
        printf "%s : Need to remove track #%d\n",
                scalar localtime,
                $id,
                if $verbose;
        next;
    }

    $sqlWrite->Begin;
    
    eval
    {
        use MusicBrainz::Server::Track;
        my $tr = MusicBrainz::Server::Track->new($sqlWrite->{dbh});
        $tr->SetId($id);
        $tr->Remove;
        $sqlWrite->Commit;

        printf "%s : Deleted track #%d\n",
                scalar localtime,
                $id,
                if $verbose;

        ++$removed;
        1;
    } or do {
        my $err = $@;
        $sqlWrite->Rollback;
        printf "%s : Error removing track #%d:\n  %s\n",
                scalar localtime,
                $id,
                $err;
    };
}

$sql->Finish;

if ($summary)
{
    printf "%s : Found %d unused track%s.\n",
        scalar localtime,
        $count, ($count==1 ? "" : "s");
    printf "%s : Successfully removed %d track%s\n",
        scalar localtime,
        $removed, ($removed==1 ? "" : "s")
        if $remove;
}

print localtime() . " : UnusedTracks finished\n";

# eof UnusedTracks
