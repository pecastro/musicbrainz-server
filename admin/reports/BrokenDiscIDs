#!/usr/bin/perl -w
# vi: set ts=4 sw=4 :
#____________________________________________________________________________
#
#   MusicBrainz -- the open internet music database
#
#   Copyright (C) 1998 Robert Kaye
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#   $Id$
#____________________________________________________________________________

use FindBin;
use lib "$FindBin::Bin/../../lib";

use strict;
use warnings;

package BrokenDiscIDs;
use base qw( MusicBrainz::Server::ReportScript );

sub GatherData
{
    my $self = shift;

    my $sql = $self->SqlObj;
    $sql->Begin;

    $sql->Do(<<'EOF');
        SELECT
                tj.id,
                tj.album,
                t.trackcount AS tracks,
                COUNT(j.track) AS actualtracks,
                MIN(j.sequence) AS firsttrack,
                MAX(j.sequence) AS lasttrack
        INTO TEMPORARY TABLE
                t_toc
        FROM
                cdtoc t, album_cdtoc tj, albumjoin j
        WHERE
                j.album = tj.album
                AND     tj.cdtoc = t.id
        GROUP BY
                tj.id, tj.album, t.trackcount
EOF

    # I'm not sure if this is necessary, but it can't really hurt
    $sql->Do("ALTER TABLE t_toc ALTER COLUMN album SET NOT NULL");
    $sql->Do("CREATE INDEX t_toc_album ON t_toc (album)");

    $sql->Commit;

    $self->GatherDataFromQuery(<<'EOF');
        SELECT
                ar.id AS artist_id,
                ar.name AS artist_name,
                ar.sortname AS artist_sortname,
                ar.resolution AS artist_resolution,
                ar.modpending AS artist_modpending,
                al.id AS album_id,
                al.name AS album_namem,
                al.modpending AS album_modpending
        FROM
                artist ar, album al, t_toc t
        WHERE
                t.album = al.id
                AND     al.artist = ar.id
                AND     (
                        t.tracks != t.actualtracks
                        OR firsttrack != 1
                        OR lasttrack != tracks
                )
        ORDER BY
                ar.sortname, al.name
EOF

}

__PACKAGE__->new->RunReport;

# eof BrokenDiscIDs
