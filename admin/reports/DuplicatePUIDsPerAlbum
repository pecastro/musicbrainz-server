#!/usr/bin/perl -w
# vi: set ts=4 sw=4 :
#____________________________________________________________________________
#
#   MusicBrainz -- the open internet music database
#
#   Copyright (C) 2005 BjÃ¶rn Krombholz
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#   $Id: DuplicatePUIDsPerAlbum 8551 2006-10-19 20:10:48Z robert $
#____________________________________________________________________________

use FindBin;
use lib "$FindBin::Bin/../../lib";

use strict;
use warnings;

package DuplicatePUIDsPerAlbum;
use base qw( MusicBrainz::Server::ReportScript );

sub GatherData
{
    my $self = shift;

    $self->Log("Querying database");
    my $sql = $self->SqlObj;

    $sql->AutoCommit;

    # get artist + album info for PUID dupes.
    my $rows = $sql->SelectListOfHashes('
        SELECT
                album.id AS album_id,
                album.name AS album_name,
                artist.id AS artist_id,
                artist.name AS artist_name,
                artist.sortname AS artist_sortname,
                artist.resolution AS artist_resolution,
                puid.puid,
                freq
        FROM
                (SELECT
                        album,
                        puid,
                        COUNT(*) AS freq
                 FROM
                        albumjoin
                 INNER JOIN
                        puidjoin
                        USING (track)
                        GROUP BY album, puid
                        HAVING COUNT(*) > 1
                ) tmp
                INNER JOIN
                        puid ON tmp.puid = puid.id
                INNER JOIN
                        album ON tmp.album = album.id
                INNER JOIN
                        artist ON album.artist = artist.id
        -- order DESC to get an ASC order when pop-ing from the result array
        ORDER BY
                artist.sortname DESC, album.name DESC;');
    #EOF

    $self->Log("number of results: " . scalar @$rows);
    my $report = $self->PagedReport;

    # reorder data to save storrage and get structure for report
    my @results;
    my $cur; $cur->{'album_id'} = "";
    my $row;
    while (1)
    {
        $row = pop @$rows;
        if (!defined $row)
        {
                if (defined $cur) { push @results, $cur; }
                last;
        }

        if ($cur->{'album_id'} ne $row->{'album_id'})
        {
                push @results, $cur;
                $cur = {
                        artist_id => $row->{'artist_id'},
                        artist_name => $row->{'artist_name'},
                        artist_sortname => $row->{'artist_sortname'},
                        artist_resolution => $row->{'artist_resolution'},
                        album_id    => $row->{'album_id'},
                        album_name  => $row->{'album_name'},
                };
        }
        push @{ $cur->{'puids'} }, {
                puid    => $row->{'puid'},
                freq   => $row->{'freq'}
        };
    }

    $self->Log("Saving results");
    for (@results) { $report->Print($_); }
}

__PACKAGE__->new->RunReport;

# eof DuplicatePUIDsPerAlbum
