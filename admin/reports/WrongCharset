#!/usr/bin/perl -w
# vi: set ts=4 sw=4 :
#____________________________________________________________________________
#
#   MusicBrainz -- the open internet music database
#
#   Copyright (C) 1998 Robert Kaye
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#   $Id$
#____________________________________________________________________________

use FindBin;
use lib "$FindBin::Bin/../../lib";

use strict;
use warnings;

package WrongCharset;
use base qw( MusicBrainz::Server::ReportScript );

sub GatherData
{
    my $self = shift;

    $self->GatherDataFromQuery(<<'EOF', [], \&filter);
        SELECT
                t.id AS track_id,
                t.name AS track_name,
                j.album AS album_id,
                t.artist AS artist_id,
                a.name AS artist_name,
                a.sortname AS artist_sortname,
                a.resolution AS artist_resolution
        FROM
                track t, albumjoin j, artist a
        WHERE
                t.name !~ '[A-Za-z0-9]'
                AND t.name NOT IN ('.', '...', '---', '?', '???')
                AND j.track = t.id
                AND t.artist = a.id
        ORDER
                BY a.sortname, j.album, t.name
EOF
}

sub filter
{
    my $row = shift;

    # Decode the name; ignore if it doesn't encode properly back into
    # latin-1, i.e. if it actually has proper characters (e.g. Han,
    # Thai etc).

    eval
    {
        my $t = $row->{track_name};
        use Encode qw( from_to FB_CROAK );
        from_to($t, "utf-8", "latin-1", FB_CROAK);
        1;
    } or return undef;

    # So it only contains latin-1 characters, but none of A-Za-z0-9.
    # A likely story!
    $row;
}

__PACKAGE__->new->RunReport;

# eof WrongCharset
